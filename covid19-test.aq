{"config":{"title":"Aquarium SARS-CoV-2 detection","description":"Aquarium protocols for molecular diagnostics of SARS-CoV-2 using PCR and RT-qPCR","copyright":"University of Washington","version":"0.0.2","authors":[{"name":"Devin Strickland","affilation":"","affiliation":"University of Washington"},{"name":"Rita Chen","affilation":"","affiliation":"Boston University"},{"name":"Dany Fu","affilation":"","affiliation":"Boston University"}],"maintainer":{"name":"Devin Strickland","email":"strcklnd@uw.edu"},"acknowledgements":[{"name":"Justin Vrana","affilation":"","affiliation":"University of Washington"},{"name":"Nuttada Panpradist","affilation":"","affiliation":"University of Washington"},{"name":"Ben Keller","affilation":"","affiliation":"University of Washington"},{"name":"Barry Lutz","affilation":"","affiliation":"University of Washington"},{"name":"Rob Moseley","affilation":"","affiliation":"Duke University"},{"name":"Steve Haase","affilation":"","affiliation":"Duke University"}],"github":{"user":"dvnstrcklnd","repo":"covid19-test","organization":"aquariumbio"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"sample_types":[{"id":1,"name":"RNA","description":"A sample of RNA","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]}],"object_types":[{"id":3,"name":"Lyophilized RNA","description":"Lyophilized RNA","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"RNA","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"RNA"},{"id":4,"name":"Purified RNA in 1.5 mL tube","description":"Purified RNA in 1.5 mL tube","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"RNA","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"M80","rows":null,"columns":null,"sample_type_name":"RNA"}],"operation_type":{"name":"Aliquot Positive Template","category":"Diagnostic RT-qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Template","sample_types":["RNA"],"object_types":["Lyophilized RNA"],"part":false,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Template","sample_types":["RNA"],"object_types":["Purified RNA in 1.5 mL tube"],"part":false,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# Aliquot Positive Template Protocol\n# Written By Rita Chen 2020-05-04\n\n# 2019-nCoV Positive Control (nCoVPC) Preparation:\n# 1) Precautions: This reagent should be handled with caution in a dedicated\n# nucleic acid handling area to prevent possible contamination. Freeze-thaw\n# cycles should be avoided. Maintain on ice when thawed.\n# 2) Resuspend dried reagent in each tube in 1 mL of nuclease-free water to\n# achieve the proper concentration. Make single use aliquots (approximately 30\n# L) and store at less than and equal to -70C.\n# 3) Thaw a single aliquot of diluted positive control for each experiment and\n# hold on ice until adding to plate. Discard any unused portion of the aliquot.\n\nclass Protocol\n\n  def main\n    # 1. Get 33 1.5 mL tube for each operation\n    get_tubes(operations.length)\n    operations.retrieve\n\n    # 2. For each Lyophilized Postive Control, resuspend in 1 mL of\n    # nuclease-free waterand, aliquot 33 use aliquots (approximately\n    # 30 L) and store at less than and equal to -70C.\n\n    # Group the operations by the input reagent\n    ops_by_input = operations.group_by {|op| op.input(\"Template\").item}\n    ops_by_input.each do |lyophilized_RNA, ops|\n      label_and_locate_output(ops)\n    end\n\n    suspend_lyophilized_RNA(operations)\n    keep_tubes = [] #Empty array for storing single use aliquots\n    \n    ops_by_input.each do |lyophilized_RNA, ops|\n      keep_tubes.push(make_aliquots(ops))\n    end\n    \n    prepare_plating(keep_tubes)\n    \n    # 3. Thaw a single aliquot of diluted positive control for each\n    # experiment and hold on ice until adding to plate.\n    # Discard any unused portion of the aliquot.\n    operations.store(interactive: true, io: \"output\", method: \"boxes\")\n  end\n\n  # Get 33 1.5 mL tubes per dried positive control\n  #\n  # @param count [Integer] the number of operations\n  def get_tubes(count)\n    show do\n      title \"Get new 1.5 mL tubes\"\n      check \"Please get #{count*33} 1.5 mL tubes\"\n    end\n  end\n\n  # Label the tubes so that the same reagents have consecutive IDs\n  # And move the output tubes to the right storage locations\n  #\n  # @param operations [OperationList] The list of operations\n  def label_and_locate_output(operations)\n    operations.make\n\n    #Declare references to output objects\n    operations.each do |op|\n      op.output(\"Template\").item.associate :volume, 30\n      op.output(\"Template\").item.save\n      \n      output_RNA = op.output(\"Template\").sample\n      for i in 0..31\n        new_aliquot = output_RNA.make_item(\"Purified RNA in 1.5 mL tube\")\n        new_aliquot.associate :volume, 30\n        new_aliquot.save\n        # Associated output RNA with a new location wizard for storage of\n        # plasmids and fragments, M80P (for DAMP)\n        link_output_item(op, output_RNA, new_aliquot)\n      end\n    end\n  end\n  \n  # Manually link the item to the operation as an output\n  #\n  # @param op [Operation] the operation that creates the items\n  # @param sample [Sample] the sample of the item\n  # @param item [Item] the item that is created\n  def link_output_item(op, sample, item)\n    fv = FieldValue.new(\n      name: \"Template\", \n      child_item_id: item.id,\n      child_sample_id: sample.id, \n      role: \"output\",\n      parent_class: \"Operation\", \n      parent_id: op.id,\n      field_type_id: op.output(\"Template\").field_type.id\n    )\n    fv.save\n  end\n\n  #Performs the resuspension protocol for a list of operations\n  #that all use the given lyophilized_RNA input.\n  #\n  # @param suspend_lyophilized_RNA [Item] the lyophilized_RNA\n  # @param operations     [OperationList] the list of operations\n  def suspend_lyophilized_RNA(operations)\n    operations.make\n\n    show do \n      title \"Resuspend Positive Template\"\n      warning \"This reagent should be handled with caution in a dedicated\\\n      nucleic acid handling area to prevent possible contamination.\"\n      warning \"Freeze-thaw cycles should be avoided. Maintain on ice when\\\n      thawed.\"\n      check \"Resuspend dried Lyophilized Postive Control RNA in each tube\\\n      in 1 mL of nuclease-free water to achieve the proper concentration.\"\n    end\n  end\n\n  #Performs the aliquote protocol for a list of operations\n  #that all use the given lyophilized_RNA input.\n  #\n  # @param make_aliquots [Item] the lyophilized_RNA\n  # @param operations     [OperationList] the list of operations\n  def make_aliquots(operations)\n    last_tube_id = \"\" #Empty string for storing item id of single use aliquot\n    operations.each do |op|\n      input_RNAs = Array.new(33, op.input(\"Template\").item.id)\n      aliquot_tubes = op.outputs().map{|output| output.item.id}\n      transfer_table = Table.new\n              .add_column(\"Lyophilized RNA\", input_RNAs)\n              .add_column(\"Output RNA Aliquot\", aliquot_tubes)\n\n      show do\n        title \"Aliquot Single Used Aliquot Positive Template\"\n        check \"Make single use aliquot by transfering 30 L of the diluted\\\n        postive control into individual 1.5 mL tubes and label it with the\\\n        proper item ID.\"\n        check \"Discard the empty input tube.\"\n        table transfer_table\n      end\n    \n      # Discard the input\n      op.input(\"Template\").item.mark_as_deleted\n\n      # Retrieve the last item of the single use aliquot\n      last_tube_id = aliquot_tubes[-1]\n    end\n    return last_tube_id\n  end\n  \n  #Prepare for plating protocol for a list of operations\n  #that all use the given Purified RNA in 1.5 mL tube output.\n  #\n  # @param prepare_plating [Item] the lyophilized_RNA\n  # @param operations     [OperationList] the list of operations\n  def prepare_plating(keep_tubes)\n    show do\n      title \"Preparation of Single Aliquot for Plating\"\n      warning \"This reagent should be handled with caution in a dedicated\\\n      nucleic acid handling area to prevent possible contamination.\"\n      warning \"Freeze-thaw cycles should be avoided. Maintain on ice when\\\n      thawed.\"\n      # Retrieve the last item of the single use aliquot\n      check \"Thaw a single aliquot of diluted positive control\\\n      #{keep_tubes} for each experiment and hold on ice until\\\n      adding to plate.\"\n      check \"Discard any unused portion of the aliquot.\"\n    end\n    \n    # Don't store the single aliquot being used during plating\n    keep_tubes.each do |id| Item.find(id).mark_as_deleted end\n  end\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":2,"name":"Primer Mix","description":"Primer Mix","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]}],"object_types":[{"id":5,"name":"Lyophilized Primer Mix","description":"Lyophilized Primer Mix","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"Primer Mix","cost":0.01,"release_method":"return","release_description":"","sample_type_id":2,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"Primer Mix"},{"id":6,"name":"Primer Mix Aliquot","description":"Primer Mix Aliquot","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"Primer Mix","cost":0.01,"release_method":"return","release_description":"","sample_type_id":2,"image":null,"prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer Mix"}],"operation_type":{"name":"Aliquot Primer/Probe","category":"Diagnostic RT-qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Primer Set","sample_types":["Primer Mix"],"object_types":["Lyophilized Primer Mix"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Primer Set","sample_types":["Primer Mix"],"object_types":["Primer Mix Aliquot"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n\n    tin  = operations.io_table 'input'\n    tout = operations.io_table 'output'\n\n    show do\n      title 'Input Table'\n      table tin.all.render\n    end\n\n    show do\n      title 'Output Table'\n      table tout.all.render\n    end\n\n    operations.store\n\n    {}\n\n  end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":3,"name":"Respiratory Specimen","description":"Incoming sample for testing","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[{"id":5,"parent_id":3,"name":"Tracking ID","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"RNA","description":"A sample of RNA","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]}],"object_types":[{"id":7,"name":"Nasopharyngeal Swab","description":"Nasopharyngeal Swab","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"each","cost":0.01,"release_method":"return","release_description":"","sample_type_id":3,"image":null,"prefix":"M80","rows":null,"columns":null,"sample_type_name":"Respiratory Specimen"},{"id":4,"name":"Purified RNA in 1.5 mL tube","description":"Purified RNA in 1.5 mL tube","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"RNA","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"M80","rows":null,"columns":null,"sample_type_name":"RNA"}],"operation_type":{"name":"Extract RNA","category":"Diagnostic RT-qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Specimen","sample_types":["Respiratory Specimen"],"object_types":["Nasopharyngeal Swab"],"part":false,"array":false,"routing":"S","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Specimen","sample_types":["RNA"],"object_types":["Purified RNA in 1.5 mL tube"],"part":false,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Method","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"QIAamp DSP Viral RNA Mini Kit,Alternative Method"},{"ftype":"json","role":"input","name":"Options","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'Standard Libs/PlanParams'\nneeds 'Standard Libs/Units'\nneeds 'Standard Libs/Debug'\nneeds 'RNAExtractionKits/RNAExtractionKits'\n\n# Extract RNA Protocol\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass Protocol\n  include PlanParams\n  include Units\n  include Debug\n  include RNAExtractionKits\n\n  ########## DEFAULT PARAMS ##########\n\n  # Default parameters that are applied equally to all operations.\n  #   Can be overridden by:\n  #   * Associating a JSON-formatted list of key, value pairs to the `Plan`.\n  #   * Adding a JSON-formatted list of key, value pairs to an `Operation`\n  #     input of type JSON and named `Options`.\n  #\n  def default_job_params\n    {\n      rna_extraction_kit: TestRNAExtractionKit::NAME\n    }\n  end\n\n  # Default parameters that are applied to individual operations.\n  #   Can be overridden by:\n  #   * Adding a JSON-formatted list of key, value pairs to an `Operation`\n  #     input of type JSON and named `Options`.\n  #\n  def default_operation_params\n    {\n      sample_volume: { qty: 100, units: MICROLITERS }\n    }\n  end\n\n  ########## MAIN ##########\n\n  def main\n    setup_test_options(operations: operations) if debug\n\n    @job_params = update_all_params(\n      operations: operations,\n      default_job_params: default_job_params,\n      default_operation_params: default_operation_params\n    )\n    return {} if operations.errored.any?\n\n    operations.retrieve.make\n\n    set_kit(name: @job_params[:rna_extraction_kit])\n\n    sample_volumes = get_options(operations: operations, key: :sample_volume)\n    if sample_volumes.uniq.length == 1\n      run_rna_extraction_kit(\n        operations: operations,\n        sample_volume: sample_volumes.first\n      )\n    else\n      run_rna_extraction_kit(\n        operations: operations,\n        use_operations: true\n      )\n    end\n\n    operations.store\n\n    {}\n  end\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"# frozen_string_literal: true\n\nclass ProtocolTest \u003c ProtocolTestBase\n  def setup\n    add_random_operations(1)\n  end\n\n  def analyze\n    log('Hello from Nemo')\n    assert_equal(@backtrace.last[:operation], 'complete')\n  end\nend\n","timing":null}},{"sample_types":[{"id":1,"name":"RNA","description":"A sample of RNA","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]},{"id":4,"name":"qPCR Reaction","description":"qPCR Reaction","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]}],"object_types":[{"id":4,"name":"Purified RNA in 1.5 mL tube","description":"Purified RNA in 1.5 mL tube","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"RNA","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"M80","rows":null,"columns":null,"sample_type_name":"RNA"},{"id":8,"name":"96-well qPCR Reaction","description":"96-well qPCR Reaction","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"qPCR Reaction","cost":0.01,"release_method":"return","release_description":"","sample_type_id":4,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"qPCR Reaction"}],"operation_type":{"name":"Prepare RT-qPCR Plate","category":"Diagnostic RT-qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Template","sample_types":["RNA"],"object_types":["Purified RNA in 1.5 mL tube"],"part":false,"array":true,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"qPCR Reactions","sample_types":["qPCR Reaction"],"object_types":["96-well qPCR Reaction"],"part":false,"array":false,"routing":"","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n\n    tin  = operations.io_table 'input'\n    tout = operations.io_table 'output'\n\n    show do\n      title 'Input Table'\n      table tin.all.render\n    end\n\n    show do\n      title 'Output Table'\n      table tout.all.render\n    end\n\n    operations.store\n\n    {}\n\n  end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":4,"name":"qPCR Reaction","description":"qPCR Reaction","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","field_types":[]}],"object_types":[{"id":8,"name":"96-well qPCR Reaction","description":"96-well qPCR Reaction","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-04-26T13:54:35.000-07:00","updated_at":"2020-04-26T13:54:35.000-07:00","unit":"qPCR Reaction","cost":0.01,"release_method":"return","release_description":"","sample_type_id":4,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"qPCR Reaction"}],"operation_type":{"name":"Run qPCR","category":"Diagnostic RT-qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"qPCR Reactions","sample_types":["qPCR Reaction"],"object_types":["96-well qPCR Reaction"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"json","role":"input","name":"Options","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"qPCR Reactions","sample_types":["qPCR Reaction"],"object_types":["96-well qPCR Reaction"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'PCR Libs/PCRComposition'\nneeds 'PCR Libs/PCRProgram'\nneeds 'Thermocyclers/Thermocyclers'\nneeds 'Standard Libs/PlanParams'\nneeds 'Standard Libs/Debug'\n\n# Protocol for loading samples into a qPCR thermocycler and running it\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n# @todo Decide whether this is actually qPCR specific\nclass Protocol\n  include ThermocyclerHelper\n  include PlanParams\n  include Debug\n\n  INPUT_REACTIONS = 'qPCR Reactions'\n\n  ########## DEFAULT PARAMS ##########\n\n  # Default parameters that are applied equally to all operations.\n  #   Can be overridden by:\n  #   * Associating a JSON-formatted list of key, value pairs to the `Plan`.\n  #   * Adding a JSON-formatted list of key, value pairs to an `Operation`\n  #     input of type JSON and named `Options`.\n  #\n  def default_job_params\n    {\n      thermocycler_model: TestThermocycler::MODEL,\n      program_name: 'CDC_TaqPath_CG',\n      qpcr: true\n    }\n  end\n\n  # Default parameters that are applied to individual operations.\n  #   Can be overridden by:\n  #   * Adding a JSON-formatted list of key, value pairs to an `Operation`\n  #     input of type JSON and named `Options`.\n  #\n  def default_operation_params\n    {}\n  end\n\n  ########## MAIN ##########\n\n  def main\n    setup_test_options(operations: operations) if debug\n\n    @job_params = update_job_params(\n      operations: operations,\n      default_job_params: default_job_params\n    )\n    return {} if operations.errored.any?\n\n    operations.retrieve.make\n\n    composition = PCRCompositionFactory.build(\n      program_name: @job_params[:program_name]\n    )\n    program = PCRProgramFactory.build(\n      program_name: @job_params[:program_name],\n      volume: composition.volume\n    )\n    thermocycler = ThermocyclerFactory.build(\n      model: @job_params[:thermocycler_model]\n    )\n\n    set_up_program(\n      thermocycler: thermocycler,\n      program: program,\n      composition: composition,\n      qpcr: @job_params[:qpcr]\n    )\n\n    load_plate_and_start_run(\n      thermocycler: thermocycler,\n      items: operations.map { |op| op.input(INPUT_REACTIONS).item },\n      experiment_filename: experiment_filename\n    )\n\n    export_measurements(thermocycler: thermocycler)\n\n    operations.store\n\n    {}\n  end\n\n  ########## NAMING METHODS ##########\n\n  # Constructs a name for the experiment file.\n  #\n  # @return [String]\n  def experiment_filename\n    date = DateTime.now.strftime('%Y-%m-%d')\n    \"#{date}_Job_#{job.id}\"\n  end\n\n  # Gets the currently active `Job`\n  #\n  # @return [Job]\n  def job\n    operation_ids = operations.map(\u0026:id)\n    ja_ids = JobAssociation.where(operation_id: operation_ids).map(\u0026:job_id).uniq\n    jobs = Job.find(ja_ids).select(\u0026:active?)\n    raise ProtocolError, 'Cannot resolve the current Job' if jobs.length \u003e 1\n\n    jobs.last\n  end\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"# frozen_string_literal: true\n\nclass ProtocolTest \u003c ProtocolTestBase\n  def setup\n    add_random_operations(1)\n    # [1..3].each do |i|\n    #   s = Sample.find_by_name(\"Test qPCR Reaction #{i}\")\n    #   add_operation\n    #     .with_input('qPCR Reactions', s)\n    #     .with_property('Options', '{}')\n    #     .with_output('qPCR Reactions', s)\n    # end\n  end\n\n  def analyze\n    log('Hello from Nemo')\n    assert_equal(@backtrace.last[:operation], 'complete')\n  end\nend\n","timing":null}}]}
